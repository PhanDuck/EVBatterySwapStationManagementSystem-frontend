import React, { useState } from "react";
import {
  Card,
  Input,
  Button,
  message,
  Row,
  Col,
  Typography,
  Space,
  Tag,
  Divider,
  Spin,
} from "antd";
import {
  PlusOutlined,
  SwapOutlined,
  CheckCircleOutlined,
  ThunderboltOutlined,
  HeartOutlined,
} from "@ant-design/icons";
import axios from "axios";

const EnterConfirmationCode = () => {
  const [code, setCode] = useState("");
  const [loading, setLoading] = useState(false);
  const [step, setStep] = useState(1); // 1: Nh·∫≠p code, 2: Cho pin v√†o, 3: S·∫µn s√†ng Swap
  const [newBattery, setNewBattery] = useState(null); // Pin m·ªõi s·∫Øp l·∫Øp v√†o
  const [oldBattery, setOldBattery] = useState(null); // Pin c≈© th√°o ra

  const token = sessionStorage.getItem("authToken");

  const { Title, Text } = Typography;

  // ƒê·ªãnh nghƒ©a c√°c API endpoints
  const API_BASE_URL = "";
  const GET_NEW_BATTERY_API_URL = "/api/swap-transaction/new-battery";
  const GET_OLD_BATTERY_API_URL = "/api/swap-transaction/old-battery";
  const POST_SWAP_API_URL = "/api/swap-transaction/swap-by-code";

  // ‚öôÔ∏è Component con hi·ªÉn th·ªã th√¥ng tin pin (d√πng l·∫°i cho c·∫£ pin c≈© v√† pin m·ªõi)
  const BatteryInfoCard = ({
    title,
    batteryData,
    loading,
    type,
    backgroundColor,
  }) => {
    const color = type === "new" ? "green" : "yellow";

    if (loading) {
      return (
        <Card
          bordered
          title={title}
          style={{
            height: 250,
            textAlign: "center",
            backgroundColor: backgroundColor || "#ffffffff",
          }}
        >
          <Spin tip="ƒêang t·∫£i th√¥ng tin pin..." />
        </Card>
      );
    }

    if (!batteryData) {
      return (
        <Card
          bordered
          title={title}
          style={{
            height: 250,
            textAlign: "center",
            display: "flex",
            flexDirection: "column",
            justifyContent: "center",
            backgroundColor: backgroundColor || "#ffffffff",
          }}
        >
          <Text type="secondary">Ch∆∞a c√≥ th√¥ng tin pin</Text>
        </Card>
      );
    }

    return (
      <Card
        bordered
        title={title}
        style={{
          minHeight: 250,
          borderColor: color,
          backgroundColor: backgroundColor || "#ffffffff",
        }}
      >
        <Space direction="vertical" style={{ width: "100%" }}>
          {/* 1. Lo·∫°i Pin */}
          <Row justify="space-between">
            <Col>
              <Text strong>Lo·∫°i Pin:</Text>
            </Col>
            <Col>
              <Text>{batteryData.model || "‚Äî"}</Text>
            </Col>
          </Row>
          <Divider style={{ margin: "8px 0" }} />

          {/* 2. M·ª©c s·∫°c (Charge Level) */}
          <Row justify="space-between">
            <Col>
              <Text strong>
                <ThunderboltOutlined style={{ color: "#faad14" }} /> M·ª©c s·∫°c
                (%):
              </Text>
            </Col>
            <Col>
              <Tag color={batteryData.chargeLevel > 70 ? "green" : "orange"}>
                {batteryData.chargeLevel}
              </Tag>
            </Col>
          </Row>
          <Divider style={{ margin: "8px 0" }} />

          {/* 3. T√¨nh tr·∫°ng pin (State of Health) */}
          <Row justify="space-between">
            <Col>
              <Text strong>
                <HeartOutlined style={{ color: "#ff4d4f" }} /> T√¨nh tr·∫°ng
                pin(%):
              </Text>
            </Col>
            <Col>
              <Tag color={batteryData.stateOfHealth > 70 ? "green" : "orange"}>
                {batteryData.stateOfHealth}
              </Tag>
            </Col>
          </Row>
        </Space>
      </Card>
    );
  };

  // ----------------------------------------------------
  //   B∆∞·ªõc 1: Nh·∫≠p Code -> L·∫•y th√¥ng tin Pin M·ªõi
  // ----------------------------------------------------
  const handleGetNewBattery = async () => {
    if (!code || code.length !== 6) {
      return message.warning("‚ö†Ô∏è Vui l√≤ng nh·∫≠p ƒë√∫ng m√£ g·ªìm 6 k√Ω t·ª±.");
    }
    if (step > 1) {
      return message.info(
        "M√£ ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n. Vui l√≤ng ti·∫øp t·ª•c c√°c b∆∞·ªõc ƒë·ªïi pin."
      );
    }

    setLoading(true);
    try {
      // API l·∫•y th√¥ng tin pin m·ªõi
      const res = await axios.get(
        `${API_BASE_URL}${GET_NEW_BATTERY_API_URL}?code=${code}`, // D√πng 'code' l√†m parameter
        {
          headers: {
            Authorization: `Bearer ${token}`,
          },
        }
      );

      setNewBattery(res.data);
      setStep(2); // Chuy·ªÉn sang b∆∞·ªõc "Cho pin v√†o"
      message.success("‚úÖ X√°c nh·∫≠n m√£ th√†nh c√¥ng! S·∫µn s√†ng cho pin v√†o.");
    } catch (error) {
      message.error(
        error?.response?.data?.message ||
          "‚ùå L·∫•y th√¥ng tin pin m·ªõi kh√¥ng th√†nh c√¥ng!"
      );
      console.error("‚ùå L·ªói l·∫•y pin m·ªõi:", error);
    } finally {
      setLoading(false);
    }
  };

  // ----------------------------------------------------
  //  B∆∞·ªõc 2: M√¥ ph·ªèng "Cho pin v√†o" -> L·∫•y th√¥ng tin Pin C≈©
  // ----------------------------------------------------
  const handleInsertNewBattery = async () => {
    setLoading(true);
    message.loading({ content: "ƒêang cho pin v√†o...", key: "insert" });

    // Sau khi pin m·ªõi ƒë∆∞·ª£c "cho v√†o", ta g·ªçi API ƒë·ªÉ l·∫•y th√¥ng tin pin c≈© c·ªßa kh√°ch h√†ng
    try {
      await new Promise((resolve) => setTimeout(resolve, 1000));

      // API l·∫•y th√¥ng tin pin c≈©
      const res = await axios.get(
        `${API_BASE_URL}${GET_OLD_BATTERY_API_URL}?code=${code}`, // D√πng 'code' l√†m parameter
        {
          headers: {
            Authorization: `Bearer ${token}`,
          },
        }
      );

      setOldBattery(res.data);
      setStep(3); // Chuy·ªÉn sang b∆∞·ªõc "S·∫µn s√†ng Swap"
      message.success({
        content: "‚úÖ Pin ƒë√£ ƒë∆∞·ª£c cho v√†o. ƒê√£ l·∫•y th√¥ng tin pin. S·∫µn s√†ng ƒë·ªïi.",
        key: "insert",
        duration: 3,
      });
    } catch (error) {
      message.error({
        content:
          error?.response?.data?.message || "‚ùå L·∫•y th√¥ng tin pin c≈© th·∫•t b·∫°i!",
        key: "insert",
      });
      console.error("‚ùå L·ªói l·∫•y pin c≈©:", error);
    } finally {
      setLoading(false);
    }
  };

  // ----------------------------------------------------
  //  B∆∞·ªõc 3: X√°c nh·∫≠n Swap cu·ªëi c√πng
  // ----------------------------------------------------
  const handleExecuteSwap = async () => {
    setLoading(true);

    // API Swap Transaction cu·ªëi c√πng
    try {
      const res = await axios.post(
        `${POST_SWAP_API_URL}?code=${code}`,
        {}, // body r·ªóng
        {
          headers: {
            Authorization: `Bearer ${token}`,
          },
        }
      );

      message.success("üéâ ƒê·ªïi pin th√†nh c√¥ng!");
      console.log("‚úÖ Response API Swap:", res.data);
      setCode("");
      setStep(1);
      setNewBattery(null);
      setOldBattery(null);
    } catch (error) {
      message.error(
        error?.response?.data?.message || "‚ùå ƒê·ªïi kh√¥ng th√†nh c√¥ng!"
      );
      console.error("‚ùå L·ªói ƒë·ªïi:", error);
    } finally {
      setLoading(false);
    }
  };

  // X√°c ƒë·ªãnh n√∫t hi·ªÉn th·ªã
  const renderActionButton = () => {
    if (step === 2) {
      return (
        <Button
          type="primary"
          block
          onClick={handleInsertNewBattery} // Cho pin v√†o
          loading={loading}
          disabled={loading}
          icon={<PlusOutlined />}
        >
          Cho pin v√†o
        </Button>
      );
    } else if (step === 3) {
      return (
        <Button
          type="primary"
          block
          onClick={handleExecuteSwap} // Execute Swap cu·ªëi c√πng
          loading={loading}
          disabled={loading || !oldBattery} // ƒê·∫£m b·∫£o ƒë√£ c√≥ th√¥ng tin pin c≈©
          icon={<SwapOutlined />}
        >
          X√°c nh·∫≠n ƒë·ªïi pin
        </Button>
      );
    }
    // Tr·∫£ v·ªÅ null ho·∫∑c m·ªôt th·∫ª r·ªóng ƒë·ªÉ ·∫©n n√∫t ·ªü Step 1
    return null;
  };

  return (
    <div
      style={{
        padding: "24px",
        minHeight: "80vh",
        display: "flex",
        justifyContent: "center",
      }}
    >
      <Space direction="vertical" size={24} style={{ width: "100%" }}>
        {/* 1. KHU V·ª∞C NH·∫¨P M√É */}
        <Card
          title={
            <Title level={4} style={{ margin: 0, textAlign: "center" }}>
              Nh·∫≠p m√£ x√°c nh·∫≠n
            </Title>
          }
          style={{
            boxShadow: "0 4px 12px rgba(0,0,0,0.1)",
            borderRadius: "8px",
            maxWidth: 400, // K√≠ch th∆∞·ªõc nh·ªè g·ªçn
            margin: "0 auto", // CƒÉn gi·ªØa
          }}
        >
          <Input
            placeholder="Nh·∫≠p m√£ g·ªìm 6 k√Ω t·ª±"
            value={code}
            maxLength={6}
            onChange={(e) => {
              const newCode = e.target.value;
              setCode(newCode);
              // Reset v·ªÅ b∆∞·ªõc 1 n·∫øu code b·ªã thay ƒë·ªïi khi ƒë√£ x√°c nh·∫≠n
              if (step > 1 && newCode !== code) {
                setStep(1);
                setNewBattery(null);
                setOldBattery(null);
              }
            }}
            style={{ marginBottom: 12 }}
            disabled={step > 1 || loading}
          />

          <Button
            type="primary"
            block
            onClick={handleGetNewBattery}
            loading={loading && step === 1}
            disabled={!code || code.length !== 6 || step > 1 || loading}
            icon={<CheckCircleOutlined />}
          >
            Ki·ªÉm tra m√£
          </Button>
        </Card>

        {/* 2. KHU V·ª∞C HI·ªÇN TH·ªä PIN V√Ä H√ÄNH ƒê·ªòNG (Ch·ªâ hi·ªán khi step > 1, CƒÉn gi·ªØa) */}
        {step > 1 && (
          <Card
            title={
              <Title level={4} style={{ margin: 0, textAlign: "center" }}>
                <SwapOutlined /> Th√¥ng tin giao d·ªãch ƒë·ªïi pin
              </Title>
            }
            style={{
              boxShadow: "0 4px 12px rgba(0,0,0,0.1)",
              borderRadius: "8px",
              // ƒê√£ ƒë∆∞·ª£c cƒÉn gi·ªØa nh·ªù container <Space>
            }}
          >
            <Row gutter={24} style={{ marginBottom: 24 }}>
              <Col span={12}>
                {/* B·∫£ng pin c≈© */}
                {step === 2 && !oldBattery ? (
                  <Card
                    bordered
                    title="Pin c≈© (ƒêang l·∫Øp tr√™n xe)"
                    style={{
                      height: 250,
                      display: "flex",
                      flexDirection: "column",
                      justifyContent: "center",
                      backgroundColor: "#ffffffff",
                    }}
                  >
                    <Text type="secondary" style={{ textAlign: "center" }}>
                      H√£y cho pin v√†o.
                    </Text>
                  </Card>
                ) : (
                  <BatteryInfoCard
                    title="Pin c≈© (ƒê√£ th√°o ra)"
                    batteryData={oldBattery}
                    loading={loading && step === 2}
                    type="old"
                    backgroundColor={step === 3 ? "#ffffebff" : null}
                  />
                )}
              </Col>
              <Col span={12}>
                {/* B·∫£ng pin m·ªõi */}
                <BatteryInfoCard
                  title="Pin m·ªõi (S·∫Ω l·∫Øp v√†o)"
                  batteryData={newBattery}
                  loading={loading && step === 1}
                  type="new"
                  backgroundColor={step > 1 ? "#f8fef2ff" : null}
                />
              </Col>
            </Row>

            {/* N√∫t h√†nh ƒë·ªông ch√≠nh */}
            <div style={{ marginTop: 20 }}>{renderActionButton()}</div>
          </Card>
        )}
      </Space>
    </div>
  );
};

export default EnterConfirmationCode;

// const handleConfirm = async () => {
//   if (!code || code.length !== 6) {
//     return message.warning("‚ö†Ô∏è Vui l√≤ng nh·∫≠p ƒë√∫ng m√£ g·ªìm 6 k√Ω t·ª±.");
//   }

//   try {
//     setLoading(true);

//     const res = await axios.post(
//       `/api/swap-transaction/swap-by-code?confirmationCode=${code}`,
//       {},
//       {
//         headers: {
//           Authorization: `Bearer ${token}`,
//         },
//       }
//     );

//     message.success("‚úÖ X√°c nh·∫≠n th√†nh c√¥ng!");
//     console.log("‚úÖ Response API:", res.data);
//   } catch (error) {
//     console.error("‚ùå L·ªói API:", error);
//     message.error(
//       error?.response?.data?.message || "‚ùå X√°c nh·∫≠n kh√¥ng th√†nh c√¥ng!"
//     );
//   } finally {
//     setLoading(false);
//   }
// };

// return (
//   <Card
//     title="Nh·∫≠p m√£ x√°c nh·∫≠n ƒë·ªÉ Swap Pin"
//     style={{ maxWidth: 400, margin: "0 auto" }}
//   >
//     <Input
//       placeholder="Nh·∫≠p m√£ g·ªìm 6 k√Ω t·ª±"
//       value={code}
//       maxLength={6}
//       onChange={(e) => setCode(e.target.value)}
//       style={{ marginBottom: 12 }}
//     />

//     <Button
//       type="primary"
//       block
//       onClick={handleConfirm}
//       loading={loading}
//       disabled={!code}
//     >
//       X√°c nh·∫≠n Swap
//     </Button>
//   </Card>
// );
